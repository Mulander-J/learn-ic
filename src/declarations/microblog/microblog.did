type UserInfo = record {name: text;};
type Time = int;
type Result = 
 variant {
   err: text;
   ok: bool;
 };
type MessageWithAuthor = 
 record {
   author: Author;
   "text": text;
   time: Time;
 };
type Message = 
 record {
   "text": text;
   time: Time;
 };
type Author = 
 record {
   id: principal;
   user: UserInfo;
 };
service : {
  authorMatch: (vec principal) -> (vec Author);
  emptyData: () -> (int);
  follow: (principal) -> (Result);
  followBy: (principal) -> (Result);
  followBys: () -> (vec Author);
  follows: () -> (vec Author);
  getRemoteName: (principal) -> (text);
  getRemotePosts: (principal, Time) -> (vec Message);
  getRemotePostsWithAuthor: (principal, Time) -> (vec MessageWithAuthor);
  get_name: () -> (text) query;
  post: (text) -> (Result);
  posts: (Time) -> (vec MessageWithAuthor) query;
  setUser: (UserInfo) -> (UserInfo);
  timeline: (Time) -> (vec MessageWithAuthor);
}
